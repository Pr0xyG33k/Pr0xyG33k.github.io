[{"categories":["Guides"],"content":"29 About In this first part of our Linux Kernel Exploitation series, we’ll lay down the essential knowledge needed to understand what the Linux kernel is, why it matters in security, and how vulnerabilities at this low level can impact entire systems. The Linux kernel is the core component that manages hardware, processes, memory, and system resources. It acts as the critical bridge between software applications and the physical machine. Because it runs with the highest privileges, any flaw or exploit within the kernel can give attackers full control over a system. Understanding kernel exploitation is a complex but rewarding journey. It requires a solid grasp of operating system internals, memory management, system calls, and security mechanisms. Caution Ethical Hacking Reminder: Only perform kernel penetration tests on networks you own or have explicit permission to test. Unauthorized hacking is illegal and unethical. 30 Linux Kernel Exploitation In today’s computing landscape, the Linux kernel stands at the heart of countless systems — from personal computers and servers to cloud infrastructures and embedded devices. It manages critical functions like memory, processes, and hardware communication, silently powering the technology we rely on every day. But have you ever wondered how this complex piece of software actually works under the hood? What happens when vulnerabilities arise deep within the kernel, and how can attackers leverage them to gain control over entire systems? In this series, Linux Kernel Exploitation we will delve into the core of the Linux operating system, uncovering how the kernel operates, how security mechanisms protect it, and how these protections can sometimes be bypassed. We’ll explore practical techniques for setting up a controlled lab environment, analyzing kernel behavior, and developing exploits—all while building a strong foundation of understanding. 31 What is the Linux Kernel? The Linux kernel is the core component of the Linux operating system. It acts as a bridge between software applications and the physical hardware of a computer. Managing everything from CPU scheduling and memory allocation to device communication and system security, the kernel ensures that all parts of the system work together seamlessly. Because it operates with the highest level of privilege on the machine (ring 0), the kernel has complete control over the system’s resources and hardware. This central role makes it both incredibly powerful and a critical target for attackers. 32 Key Concepts Before diving into exploitation, it’s essential to understand some key aspects of the Linux kernel. These foundational concepts help explain why the kernel is such a powerful — and attractive — target. Concept Description Privilege Levels The kernel runs in ring 0, with full access to hardware and memory. User applications run in ring 3. Monolithic Architecture Linux uses a monolithic kernel, meaning it includes device drivers and modules within the kernel space. Syscalls System calls are the interface between user applications and the kernel (e.g., read(), write()). Kernel Space vs User Space Separation between kernel memory and user memory helps maintain system stability and security. Memory Management The kernel controls virtual memory, paging, and physical memory allocation. Modules Kernel modules are pieces of code that can be dynamically loaded into the kernel (e.g., drivers). Scheduling Responsible for task switching, process priorities, and CPU time allocation. Filesystem Interface The kernel manages filesystems and interacts with storage devices. These components are often the basis for real-world vulnerabilities, such as buffer overflows in device drivers or misconfigurations in syscall implementations. 33 Evolution Linux has evolved dramatically since its first release in 1991. With each new version, features, performance, and security mechanisms have been improved — but so have the opportunities for discovering bugs","date":"2025-06-14","objectID":"/posts/kernel01/:0:0","tags":["Kernel","Exploit Development"],"title":"Linux Kernel Exploitation Part 1","uri":"/posts/kernel01/"},{"categories":["Guides"],"content":"33 About In Part 3 of our Wireless Hacking series, we will delve into the practical application of wireless attacks. After exploring the basics of Wi-Fi and setting up a safe testing environment, it’s time to get hands-on. In this post, we’ll focus on attacking WEP (Wired Equivalent Privacy) — a once-standard but now outdated and highly vulnerable wireless encryption protocol. In this post, you’ll learn how WEP works, the cryptographic weaknesses it suffers from, and step-by-step how to exploit these flaws using tools like aircrack-ng and aireplay-ng. By the end, you’ll understand why WEP is obsolete and how attackers can recover a WEP key within minutes. Caution Ethical Hacking Reminder: Only perform wireless penetration tests on networks you own or have explicit permission to test. Unauthorized hacking is illegal and unethical. 34 RC4/ Stream Cipher The process starts when the user creates a root key of size 128 bits. This root key is then encrypted using the RC4 algorithm, which generates a keystream. Once the keystream is generated, it is combined with the plaintext data using an XOR gate (logical operation). The result of this operation gives us the ciphertext, which can then be sent. graph TD RootKey[\"Root Key (128 bits)\"] RC4[\"RC4 Algorithm\"] Keystream[\"Keystream (Generated by RC4)\"] Plaintext[\"Plaintext Data\"] XOR[\"XOR Operation\"] Ciphertext[\"Ciphertext (Output)\"] RootKey --\u003e RC4 RC4 --\u003e Keystream Keystream --\u003e XOR Plaintext --\u003e XOR XOR --\u003e Ciphertext graph TD RootKey[\"Root Key (128 bits)\"] RC4[\"RC4 Algorithm\"] Keystream[\"Keystream (Generated by RC4)\"] Plaintext[\"Plaintext Data\"] XOR[\"XOR Operation\"] Ciphertext[\"Ciphertext (Output)\"] RootKey --\u003e RC4 RC4 --\u003e Keystream Keystream --\u003e XOR Plaintext --\u003e XOR XOR --\u003e Ciphertext35 WEP Packet The process of sending a packet using WEP begins with appending a 24-bit Initialization Vector (IV) to the root key. This new combined key is then input into the RC4 encryption algorithm, which generates a keystream unique to that packet. Next, this keystream is combined with the plaintext data using an XOR operation, producing the ciphertext that will be transmitted over the wireless network. Since the IV changes with every packet, it is appended along with the ciphertext. This is necessary because the receiving device (such as a router) needs the IV to recreate the same keystream and correctly decrypt the message. Without the IV, decryption would not be possible, as the key would not match the keystream used for encryption. graph TD RootKey[\"Root Key (128 bits)\"] IV[\"IV (24 bits)\"] RC4[\"RC4 Algorithm\"] Keystream[\"Keystream: 1101101010110010101 1001010110010101\"] Plaintext[\"Plain Text:\\nGET / HTTP 1.1\\nHost: google.com\"] XOR[\"XOR Operation\"] Ciphertext[\"Ciphertext:\\na1b2c3d4e5f67890==\"] RootKey --\u003e RC4 IV --\u003e RC4 RC4 --\u003e Keystream Keystream --\u003e XOR Plaintext --\u003e XOR XOR --\u003e Ciphertext graph TD RootKey[\"Root Key (128 bits)\"] IV[\"IV (24 bits)\"] RC4[\"RC4 Algorithm\"] Keystream[\"Keystream: 1101101010110010101 1001010110010101\"] Plaintext[\"Plain Text:\\nGET / HTTP 1.1\\nHost: google.com\"] XOR[\"XOR Operation\"] Ciphertext[\"Ciphertext:\\na1b2c3d4e5f67890==\"] RootKey --\u003e RC4 IV --\u003e RC4 RC4 --\u003e Keystream Keystream --\u003e XOR Plaintext --\u003e XOR XOR --\u003e Ciphertext36 Router-side Decryption During router-side decryption, the process begins by appending the root key with the 24-bit Initialization Vector (IV) extracted from the received data packet. This new key is then used as input to the RC4 algorithm, which generates a pseudorandom keystream. Next, this keystream is combined with the ciphertext using an XOR operation. graph TD RootKey[\"Root Key (128 bits)\"] IV[\"IV (24 bits)\"] RC4[\"RC4 Algorithm\"] Keystream[\"Keystream: 1101101010110010101 1001010110010101\"] XOR[\"XOR Operation\"] Ciphertext[\"Ciphertext:\\na1b2c3d4e5f67890==\"] Plaintext[\"Plain Text:\\nGET / HTTP 1.1\\nHost: google.com\"] RootKey --\u003e RC4 IV --\u003e RC4 RC4 --\u003e Keystream Keystream --\u003e XOR Ciphertext --\u003e XOR XOR --\u003e Plaintext graph TD RootKey[\"Root Key (12","date":"2025-05-26","objectID":"/posts/wireless03/:0:0","tags":["Web Security","Wireless"],"title":"Wireless Hacking Part 3","uri":"/posts/wireless03/"},{"categories":["Guides"],"content":"25 About In Part 2 of our Wireless Hacking series, we shift our focus from theory to practice. Having explored the fundamental concepts of wireless networks and security in the first part of this series, it’s now time to transition from theoretical knowledge to hands-on experience. While understanding the theory behind wireless attacks is essential, practical skills are just as important in mastering wireless security. However, before we begin exploring the world of wireless hacking and penetration testing, it’s critical to create a safe and controlled environment in which to learn Caution Ethical Hacking Reminder: Only perform wireless penetration tests on networks you own or have explicit permission to test. Unauthorized hacking is illegal and unethical. 26 Environment Before performing any wireless attacks or experiments, it’s crucial to set up a safe and isolated testing environment. Here are two solid options depending on your setup and preferences: 26.1 Option 1: Installing Kali Linux on a Virtual Machine Recommended software: VirtualBox or VMware Workstation Player (free for personal use) or QEMU/KVM. 26.1.1 Option 1 Downloads Links Kali Linux Virtual Machines Image Kali Linux ISO Image 26.1.2 Option 1 Installation Steps Make sure virtualization (Intel VT or AMD-V) is enabled in your computer’s BIOS/UEFI settings. Allocate at least 2 GB of RAM and 20 GB of disk space. Set the network adapter to “Bridged Adapter” to give Kali access to your local network. Use a USB Wi-Fi adapter that supports monitor mode, and pass it through to the VM. 26.2 Option 2: Installing Kali Linux on a Raspberry Pi Required hardware: Raspberry Pi 4 MicroSD card (minimum 16 GB) Power supply, keyboard, mouse, and HDMI screen 26.2.1 Option 2 Downloads Links Kali Linux ARM image for Raspberry Pi 26.2.2 Option 2 Installations Steps Use Raspberry Pi Imager or a similar tool to flash the Kali image onto the microSD card. Insert the card into the Raspberry Pi, connect all peripherals, and boot it up. Follow the on-screen setup instructions and ensure your Wi-Fi adapter is compatible with monitor mode. 27 Architecture The architecture of a Wi-Fi hacking lab is designed to create a controlled environment for safely testing wireless security. At the core of the lab is the Attacker Machine (Kali Linux), which runs penetration testing tools to perform attacks on the Target Access Point (Test AP). The Test Client Device connects to the AP, simulating a user’s interaction with the network. The Isolation Switch/Firewall ensures the lab is separated from the wider network and blocks unauthorized internet access, protecting the external network from any potential disruption. Finally, the Monitoring \u0026 Logging Station captures and analyzes the traffic between the attacker, the AP, and the client, allowing for detailed analysis and logging of all actions. This setup ensures that wireless security testing can be performed safely and ethically within an isolated environment. graph TD attacker[\"Attacker Machine (Kali Linux)\"] ap[\"Target Access Point (Test AP)\"] client[\"Test Client Device\"] firewall[\"Isolation Switch / Firewall\"] monitor[\"Monitoring \u0026 Logging Station\"] Internet[\"Internet\"] attacker --\u003e|Inject \u0026 Capture Traffic| ap client --\u003e|Connects to| ap ap --\u003e|Connects through| firewall attacker --\u003e|Sends data for analysis| monitor client --\u003e|Traffic monitored by| monitor firewall -.-\u003e|Blocks traffic to Internet| Internet class attacker,ap,client,firewall,monitor,Internet neutral; graph TD attacker[\"Attacker Machine (Kali Linux)\"] ap[\"Target Access Point (Test AP)\"] client[\"Test Client Device\"] firewall[\"Isolation Switch / Firewall\"] monitor[\"Monitoring \u0026 Logging Station\"] Internet[\"Internet\"] attacker --\u003e|Inject \u0026 Capture Traffic| ap client --\u003e|Connects to| ap ap --\u003e|Connects through| firewall attacker --\u003e|Sends data for analysis| monitor client --\u003e|Traffic monitored by| monitor firewall -.-\u003e|Blocks traffic to Internet| Internet class attacker,ap,client,firewall,mo","date":"2025-05-23","objectID":"/posts/wireless02/:0:0","tags":["Web Security","Wireless"],"title":"Wireless Hacking Part 2","uri":"/posts/wireless02/"},{"categories":["Guides"],"content":"41 About In this blog, we have introduced the basics of wireless hacking to lay the groundwork for understanding how wireless networks function and the security challenges they present. We began by discussing the fundamental concepts of WiFi, including its evolution, how it enables wireless communication, and the crucial terminology used in the realm of wireless networking. Additionally, we explored the history of WiFi—from its early days as a simple communication medium to its widespread adoption in homes, businesses, and public spaces. Understanding this evolution provides us with context for the vulnerabilities that exist in modern wireless systems today. Join us for an engaging journey that combines learning, awareness, and securing our wireless connections. Caution Ethical Hacking Reminder: Only perform wireless penetration tests on networks you own or have explicit permission to test. Unauthorized hacking is illegal and unethical. 42 Wireless Hacking In today’s world, Wi-Fi is ubiquitous, powering the internet connection for our devices and enabling seamless communication and access to information. But have you ever stopped to wonder how Wi-Fi actually works beneath the surface? Is it possible to manipulate wireless networks for various purposes? In this series, “Guide to Wireless Hacking,” we will explore the inner workings of Wi-Fi networks, uncover their vulnerabilities, and learn how these weaknesses can be exploited. In this first blog post, we will start with the fundamentals. We’ll explore how Wi-Fi networks operate, define essential networking terms, and take a look at the history and key characteristics of Wi-Fi technology. 43 What is Wi-Fi? Wi-Fi, which stands for Wireless Fidelity, is a wireless technology that enables devices to connect to the internet or communicate with each other without using physical cables. It relies on radio waves to transmit data, which allows it to function in areas where it’s not possible to run traditional cables. Wi-Fi is the primary method of internet connectivity in homes and businesses. It’s also widely available in public spaces such as cafés, libraries, and airports. 44 Key Features Feature Description Wireless Connectivity Wi-Fi eliminates the need for cables, allowing you to connect your devices wirelessly to the internet. Portability As a wireless technology, Wi-Fi enables you to easily take your devices and connect to available Wi-Fi networks wherever you go. Speed Over time, Wi-Fi speeds have steadily improved, and today’s networks can match or even surpass wired connections in terms of performance. Security Wi-Fi networks can be secured using several encryption methods, including WPA2 and WPA3, to ensure privacy and data protection. Wide Compatibility Wi-Fi is widely supported, and nearly all modern devices come with built-in Wi-Fi adapters. Range Wi-Fi coverage varies depending on the network’s frequency (2.4 GHz vs 5 GHz) and environmental factors. Generally, 2.4 GHz offers a broader range but lower speeds than 5 GHz networks. Obstacle Wi-Fi signals can travel through walls and other obstacles, but the signal strength decreases as it passes through materials. Interference Wi-Fi networks can be disrupted by other electronic devices, such as microwaves and cordless phones, causing signal degradation. Security Risks While various security protocols help protect Wi-Fi networks, no system is completely immune to hacking attempts. 45 The Technology Behind Wi-Fi operates based on the principles of radio wave transmission and modulation. This allows devices to communicate wirelessly and transfer data. The technology is built on the IEEE 802.11 family of standards, which outline the specifications and protocols used for wireless local area networks (WLANs). Note The IEEE (Institute of Electrical and Electronics Engineers) is an international organization that creates technical standards for various fields of engineering. 46 The Evolution Wi-Fi technology was developed through ","date":"2025-05-20","objectID":"/posts/wireless01/:0:0","tags":["Web Security","Wireless"],"title":"Wireless Hacking Part 1","uri":"/posts/wireless01/"},{"categories":["Thoughts"],"content":" “Behind every well-organized repo lies a story of purpose, experimentation, and constant iteration.” 17 About After years of hands-on experience in cybersecurity and development, I’ve learned that code is just one part of the battle. The structure we build around our work — our process, our repository, our mindset — is what allows our projects to scale, evolve, and remain resilient. This GitHub Page is more than just a collection of code — it’s a reflection of my workflow, my evolution, and the systems I’ve put in place to stay adaptable in a fast-changing world. 18 Architecture To give you a better idea of how I separate concerns and automate deployments, here’s a simplified view of the repository workflow Each directory, file, and branch serves a purpose. Here’s a high-level overview of how my main repository is structured: flowchart LR L[Local Files] L2[Local Files] GH_Private[(GitHub Private Repo)] GH_Public[(GitHub Public Repo)] Actions[GitHub Actions] GH_Pages[GitHub Pages] Vercel[Vercel] More[More...] L --\u003e|Git Push| GH_Private L2 --\u003e|Git Push| GH_Public GH_Private --\u003e|Git Submodule| GH_Public GH_Public --\u003e Actions Actions --\u003e|Deploy| GH_Pages Actions --\u003e|Deploy| Vercel Actions --\u003e|Deploy| More flowchart LR L[Local Files] L2[Local Files] GH_Private[(GitHub Private Repo)] GH_Public[(GitHub Public Repo)] Actions[GitHub Actions] GH_Pages[GitHub Pages] Vercel[Vercel] More[More...] L --\u003e|Git Push| GH_Private L2 --\u003e|Git Push| GH_Public GH_Private --\u003e|Git Submodule| GH_Public GH_Public --\u003e Actions Actions --\u003e|Deploy| GH_Pages Actions --\u003e|Deploy| Vercel Actions --\u003e|Deploy| More19 Branch I follow a Git Flow-inspired model because it enforces discipline in collaborative work. It allows features, hotfixes, and releases to evolve in parallel, with clear boundaries and responsibilities Maintaining a clean and sustainable workflow is key in collaborative and long-term projects. Here’s the branching model I follow: main – The production branch. Only stable, reviewed, and tested code lives here. develop – The integration branch for ongoing development. Features are merged here after review and testing. feature/* – Used for individual feature development (e.g., feature/log-capture, feature/api-hardening). bugfix/* – Quick patches or specific bug resolutions. release/* – For preparing stable releases, including documentation and final testing. This structure allows me to stay agile while ensuring quality and traceability in the work I deliver. gitGraph commit id: \"Initial commit\" branch develop checkout develop commit id: \"Init project structure\" commit id: \"Setup CI/CD\" branch feature/log-capture checkout feature/log-capture commit id: \"Add log capture module\" checkout develop merge feature/log-capture id: \"Merge log-capture\" branch feature/api-hardening checkout feature/api-hardening commit id: \"Improve API input validation\" commit id: \"Add rate limiting\" checkout develop merge feature/api-hardening id: \"Merge api-hardening\" branch bugfix/token-expiry checkout bugfix/token-expiry commit id: \"Fix token expiry bug\" checkout develop merge bugfix/token-expiry id: \"Merge token fix\" branch release/v1.0 checkout release/v1.0 commit id: \"Prepare release v1.0\" checkout main merge release/v1.0 id: \"Release v1.0 to production\" commit id: \"Hotfix README\" checkout develop branch feature/ui-redesign commit id: \"Start UI redesign\" gitGraph commit id: \"Initial commit\" branch develop checkout develop commit id: \"Init project structure\" commit id: \"Setup CI/CD\" branch feature/log-capture checkout feature/log-capture commit id: \"Add log capture module\" checkout develop merge feature/log-capture id: \"Merge log-capture\" branch feature/api-hardening checkout feature/api-hardening commit id: \"Improve API input validation\" commit id: \"Add rate limiting\" checkout develop merge feature/api-hardening id: \"Merge api-hardening\" branch bugfix/token-expiry checkout bugfix/token-expiry commit id: \"Fix token expiry bug\" checkout develop merge bugfix/token-expiry id: ","date":"2025-05-12","objectID":"/posts/github/:0:0","tags":["Journey"],"title":"Github Workflow","uri":"/posts/github/"},{"categories":["Thoughts"],"content":" “What wakes you up every morning is not the alarm clock, but your dreams.” I’ve lived through moments where this belief kept me going. I’ve seen the effort I’ve put into my work, and now, as I look back, the real question isn’t whether I’ve earned what I have — it’s about continuing to push forward, unflinching in the face of challenges. In cybersecurity, the fight is never over. It’s a world where the enemy never sleeps, and neither should we. From my early days in tech, grappling with complex algorithms and shifting to cybersecurity, the road has been long. I started with basic coding, moved to penetration testing, then switched to defensive security, teaching interns, and tackling real-world security problems. Every step has been driven by curiosity and the desire to defend what matters — our digital lives. Time doesn’t pause because we hesitate. Like you, there are countless others chasing their dreams. No one is born a cybersecurity expert, but each day is an opportunity to grow, to protect, and to evolve. Never be content with where you are; always strive to learn, to adapt, and to secure. I started this blog to share my journey — from early security challenges to tips on staying safe online. In the early days, I followed the guidance of mentors, learned from books, and coded through the night. The name “Securing the Digital World” was born from the countless hours spent defending what many people overlook: the safety of our digital lives. Here’s to the next chapter of cybersecurity, as we continue to evolve in a world where data is power, and protection is key. ","date":"2025-05-10","objectID":"/posts/hello-world/:0:0","tags":["Journey"],"title":"Hello World","uri":"/posts/hello-world/"},{"categories":null,"content":" Stand firm when the world resists, but never surrender to yourself. — Personal Code Who Am I? “The quieter you become, the more you are able to hear.” — Rumi I’m ProxyGeek, a cybersecurity enthusiast and ethical hacker with a deep interest in offensive security, digital forensics, and capture-the-flag competitions. By day, I work on secure development and exploit analysis. By night, I explore reverse engineering, vulnerability research, and write-ups to share what I learn with the community. Cybersecurity Enginer Security \u0026 CTF Player Interests: Web exploitation, privilege escalation, binary exploitation, threat modeling Frequent player on Hack The Box, RootMe, TryHackMe and local CTFs Background in Computer Science \u0026 Security Engineering Strong belief in knowledge sharing \u0026 open-source collaboration GitHub: @ProxyGeek About the Blog This space serves as a personal knowledge base and a digital lab notebook. You’ll find: CTF walkthroughs \u0026 methodology Write-ups on exploitation techniques Notes on real-world vulnerabilities \u0026 CVEs Cybersecurity tooling tips and custom scripts Philosophy, digital hygiene, and opsec mindset You can subscribe via GitHub. /** * \"A collection of strengths from all sources\" * Licensed under CC BY-NC-SA 4.0 * @since 2025-05-08 20:01:01 */ class Blog { constructor(title, creator, url) { this.title = title; this.creator = creator; this.url = url; } } // The purpose of this site is not to flaunt knowledge, but to record ignorance. const website = new Blog('A Collection of Strengths', 'ProxyGeek', 'https://proxygeek.blog'); History Official launch of this cybersecurity-focused blog. A space to share learning, experiments, and reflections. 2025-06-17Started working toward OffSec certifications to deepen technical skills and validate knowledge. 2025-05-10Started drafting write-ups on CTFs and security tooling. Idea for a blog took shape. 2025-04-12Began diving seriously into InfoSec and ethical hacking. Joined a few beginner-friendly CTFs. 2025-01-20 EnterPGgyIGNsYXNzPSJoZWFkaW5nLWVsZW1lbnQiIGl1b0ba2dd7bd98974ce28fce63kPSJkYXRhLWFuYWx5c2lzIj48c3Bhbj5EYXRhIEFuYWx5c2lzPC9zcGFuPgogIDxhIGhyZWY9IiNkYXRhLWFuYWx5c2lzIiBjbGFzcz0iaGVhZGluZy1tYXJrIj4KICAgIDxzdmcgY2xhc3M9Im9jdGljb24gb2N0aWNvbi1saW5rIiB2aWV3Qm94PSIwIDAgMTYgMTYiIHZlcnNpb249IjEuMSIgd2lkdGg9IjE2IiBoZWlnaHQ9IjE2IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PHBhdGggZD0ibTcuNzc1IDMuMjc1IDEuMjUtMS4yNWEzLjUgMy41IDAgMSAxIDQuOTUgNC45NWwtMi41IDIuNWEzLjUgMy41IDAgMCAxLTQuOTUgMCAuNzUxLjc1MSAwIDAgMSAuMDE4LTEuMDQyLjc1MS43NTEgMCAwIDEgMS4wNDItLjAxOCAxLjk5OCAxLjk5OCAwIDAgMCAyLjgzIDBsMi41LTIuNWEyLjAwMiAyLjAwMiAwIDAgMC0yLjgzLTIuODNsLTEuMjUgMS4yNWEuNzUxLjc1MSAwIDAgMS0xLjA0Mi0uMDE4Ljc1MS43NTEgMCAwIDEtLjAxOC0xLjA0MlptLTQuNjkgOS42NGExLjk5OCAxLjk5OCAwIDAgMCAyLjgzIDBsMS4yNS0xLjI1YS43NTEuNzUxIDAgMCAxIDEuMDQyLjAxOC43NTEuNzUxIDAgMCAxIC4wMTggMS4wNDJsLTEuMjUgMS4yNWEzLjUgMy41IDAgMSAxLTQuOTUtNC45NWwyLjUtMi41YTMuNSAzLjUgMCAwIDEgNC45NSAwIC43NTEuNzUxIDAgMCAxLS4wMTggMS4wNDIuNzUxLjc1MSAwIDAgMS0xLjA0Mi4wMTggMS45OTggMS45OTggMCAwIDAtMi44MyAwbC0yLjUgMi41YTEuOTk4IDEuOTk4IDAgMCAwIDAgMi44M1oiPjwvcGF0aD48L3N2Zz4KICA8L2E+CjwvaDI+PHVsPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9jbG91ZC51bWFtaS5pcy9zaGFyZS80NUNUSnVpODJCcVU3UDE0L3ByMHh5ZzMzay5naXRodWIuaW8idGFyZ2V0PSJfYmxhbmsiIHJlbD0iZXh0ZXJuYWwgbm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlciI+VW1hbWk8aSBjbGFzcz0iZmEtc29saWQgZmEtZXh0ZXJuYWwtbGluay1hbHQgZmEtZncgZmEteHMgbXMtMSB0ZXh0LXNlY29uZGFyeSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2E+PC9saT4KPC91bD4KPCEtLQotIFtWZXJjb3VudF0oaHR0cHM6Ly92ZXJjb3VudC5vbmUvZGFzaGJvYXJkL2FuYWx5dGljcz9kb21haW49UHIweHlHMzNrLmdpdGh1Yi5pbykKLS0+Cg== - views ","date":"2025-05-08","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"}]